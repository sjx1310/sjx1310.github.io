[{"content":"参考：\n快速入门 – React (docschina.org)\nQuick Start – React\n基本组件 React 组件是返回标签的 JavaScript 函数：\nfunction MyButton() { return ( \u0026lt;button\u0026gt;I\u0026#39;m a button\u0026lt;/button\u0026gt; ); } 至此，你已经声明了 MyButton，你可以把它嵌套到另一个组件中。\nReact 组件必须以大写字母开头，而 HTML 标签则必须是小写字母。\nexport default function MyApp() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Welcome to my app\u0026lt;/h1\u0026gt; \u0026lt;MyButton /\u0026gt; \u0026lt;/div\u0026gt; ); } 此外，还可以用class定义组件：\n语法：使用function定义的组件是一个函数，而使用class定义的组件是一个类。 写法：使用function定义的组件需要手动处理props，而使用class定义的组件可以通过this.props来获取props。 生命周期：使用class定义的组件可以使用更多的生命周期函数，例如componentDidMount和componentWillUnmount等等。 状态管理：使用class定义的组件可以使用state来管理组件的状态，而使用function定义的组件无法使用state。 性能：使用function定义的组件比使用class定义的组件更加轻量级，因为它不需要实例化一个类。但是在某些情况下，使用class定义的组件可能会更快，因为它可以使用shouldComponentUpdate函数来优化渲染。 使用JSX标签 JSX 是 JavaScript 语法扩展，可以让你在 JavaScript 文件中书写类似 HTML 的标签。\nJSX 规则 1. 只能返回一个根元素 如果想要在一个组件中包含多个元素，需要用一个父标签把它们包裹起来。\n例如，你可以使用一个 \u0026lt;div\u0026gt; 标签：\n\u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;海蒂·拉玛的代办事项\u0026lt;/h1\u0026gt; \u0026lt;img src=\u0026#34;https://i.imgur.com/yXOvdOSs.jpg\u0026#34; alt=\u0026#34;Hedy Lamarr\u0026#34; class=\u0026#34;photo\u0026#34; \u0026gt; \u0026lt;ul\u0026gt; ... \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; 如果你不想在标签中增加一个额外的 \u0026lt;div\u0026gt;，可以用 \u0026lt;\u0026gt; 和 \u0026lt;/\u0026gt; 元素来代替：\n\u0026lt;\u0026gt; \u0026lt;h1\u0026gt;海蒂·拉玛的代办事项\u0026lt;/h1\u0026gt; \u0026lt;img src=\u0026#34;https://i.imgur.com/yXOvdOSs.jpg\u0026#34; alt=\u0026#34;Hedy Lamarr\u0026#34; class=\u0026#34;photo\u0026#34; \u0026gt; \u0026lt;ul\u0026gt; ... \u0026lt;/ul\u0026gt; \u0026lt;/\u0026gt; 这个空标签被称作 Fragment. React Fragment 允许你将子元素分组，而不会在 HTML 结构中添加额外节点。\nJSX 虽然看起来很像 HTML，但在底层其实被转化为了 JavaScript 对象，你不能在一个函数中返回多个对象，除非用一个数组把他们包装起来。这就是为什么多个 JSX 标签必须要用一个父元素或者 Fragment 来包裹。\n2. 标签必须闭合 JSX 要求标签必须正确闭合。像 \u0026lt;img\u0026gt; 这样的自闭合标签必须书写成 \u0026lt;img /\u0026gt;，而像 \u0026lt;li\u0026gt;oranges 这样只有开始标签的元素必须带有闭合标签，需要改为 \u0026lt;li\u0026gt;oranges\u0026lt;/li\u0026gt;。\n海蒂·拉玛的照片和代办事项的标签经修改后变为：\n\u0026lt;\u0026gt; \u0026lt;img src=\u0026#34;https://i.imgur.com/yXOvdOSs.jpg\u0026#34; alt=\u0026#34;Hedy Lamarr\u0026#34; class=\u0026#34;photo\u0026#34; /\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;发明一种新式交通信号灯\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;排练一个电影场景\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;改进频谱技术\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/\u0026gt; 3. 使用驼峰式命名法 JSX 最终会被转化为 JavaScript，而 JSX 中的属性也会变成 JavaScript 对象中的键值对。在你自己的组件中，经常会遇到需要用变量的方式读取这些属性的时候。但 JavaScript 对变量的命名有限制。例如，变量名称不能包含 - 符号或者像 class 这样的保留字。\n这就是为什么在 React 中，大部分 HTML 和 SVG 属性都用驼峰式命名法表示。例如，需要用 strokeWidth 代替 stroke-width。由于 class 是一个保留字，所以在 React 中需要用 className 来代替。这也是 DOM 属性中的命名:\n\u0026lt;img src=\u0026#34;https://i.imgur.com/yXOvdOSs.jpg\u0026#34; alt=\u0026#34;Hedy Lamarr\u0026#34; className=\u0026#34;photo\u0026#34; /\u0026gt; 响应事件 你可以通过在组件中声明 事件处理 函数来响应事件：\nfunction MyButton() { function handleClick() { alert(\u0026#39;You clicked me!\u0026#39;); } return ( \u0026lt;button onClick={handleClick}\u0026gt; Click me \u0026lt;/button\u0026gt; ); } Note:\nDo not call the event handler function: you only need to pass it down. React will call your event handler when the user clicks the button.\n更新界面、记录数据 组件通常需要根据交互更改屏幕上显示的内容。输入表单应该更新输入字段，单击轮播图上的“下一个”应该更改显示的图片，单击“购买”应该将商品放入购物车。\n组件需要“记住”某些东西：当前输入值、当前图片、购物车。在 React 中，这种组件特有的记忆被称为 state。\n局部变量不能达到更新效果的原因：\n局部变量无法在多次渲染中持久保存。 当 React 再次渲染这个组件时，它会从头开始渲染——不会考虑之前对局部变量的任何更改。 更改局部变量不会触发渲染。 React 没有意识到它需要使用新数据再次渲染组件。 要使用新数据更新组件，需要做两件事：\n保留 渲染之间的数据。 触发 React 使用新数据渲染组件（重新渲染）。 useState Hook 提供了这两个功能：\nState 变量 用于保存渲染间的数据。 State setter 函数 更新变量并触发 React 再次渲染组件。 从 React 引入 useState：\nimport { useState } from \u0026#39;react\u0026#39;; 在button组件中声明state变量：\nfunction MyButton() { const [count, setCount] = useState(0); // ... 你将从 useState 中获得两样东西：当前的 state（count），以及用于更新它的函数（setCount）。你可以给它们起任何名字，但按照惯例，需要像这样 [something, setSomething] 为它们命名。\n第一次显示按钮时，count 的值为 0，因为你把 0 传给了 useState()。当你想改变 state 时，调用 setCount() 并将新的值传递给它。点击该按钮计数器将递增：\nfunction handleClick() { setIndex(index + 1); } \u0026lt;button onClick={handleClick}\u0026gt; Next \u0026lt;/button\u0026gt; 组件间共享数据 参考：\nhttps://react.docschina.org/learn#sharing-data-between-components\n","date":"2023-04-18T13:59:07+08:00","permalink":"https://example.com/p/react/","title":"React"},{"content":"hugo环境搭建 hugo的安装网上一大把，这里就不多bb了。\n配置主题 通过git clone或者手动下载，将自己看上的主题放到themes目录下，将主题目录下的/exampleSite/config.toml（或者.yaml）放到网站的根目录，之后可以通过\nhugo server -D 在本地构建，预览一下网站的样式。\n基本信息 修改config文件，来配置自己的网站名称、头像、介绍等信息：\nsidebar: emoji: 🤡 subtitle: 惆怅东栏一株雪，人生看得几清明 avatar: enabled: true local: true src: img/avatar.png ps: 这里的头像放在/assets/img下，需要自己手动创建该目录。\n侧边栏页面 侧边栏的配置如下：\nmenu: main: - identifier: home name: 主页 url: / weight: -100 params: icon: home social: - identifier: github name: GitHub url: https://github.com/yourname params: icon: github - identifier: weibo name: Weibo url: https://weibo.com params: icon: weibo 在social下面可以增加一些自己社交媒体（如github、微博）的链接，更方便被开盒。可以在各种开源图标库上找一些自己喜欢的图标，放在/assets/icons下面。\n在main下面增加对象并配置URL，可以在侧边栏增加按钮。\n此外，stack主题默认提供了关于、归档、搜索、友链这四个入口。\n参照主题的exampleSite，content文件夹的目录如下：\ncontent tree . ├── page │ ├── about │ │ ├── index.md │ │ └── index.zh-cn.md │ ├── archives │ │ └── index.md │ ├── links │ │ ├── index.md │ │ └── ts-logo-128.jpg │ └── search │ └── index.md └── post ├── first.md └── second.md 其中关于和友链这两个页面的内容可以自定义，编辑各自目录下的md文件，就可以把自己和一些buddy的姓名和学校介绍一下。\n页面效果 进一步配置页面效果，就需要编辑一下相关的css代码了。这些代码一般在/assets/scss目录下面。\n例如，要想调整一下文章目录之间卡片的间距，首先通过开发者工具查看一下对应元素的class：\n之后可以在各种代码编辑器中善用查找功能找到对应的样式，然后修改。\n","date":"2023-04-17T13:28:25+08:00","permalink":"https://example.com/p/hugo-stack%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AE/","title":"hugo stack主题的配置"},{"content":"hugo环境搭建 hugo的安装网上一大把，这里就不多bb了。\n配置主题 通过git clone或者手动下载，将自己看上的主题放到themes目录下，将主题目录下的/exampleSite/config.toml（或者.yaml）放到网站的根目录，之后可以通过\nhugo server -D 在本地构建，预览一下网站的样式。\n基本信息 修改config文件，来配置自己的网站名称、头像、介绍等信息：\nsidebar: emoji: 🤡 subtitle: 惆怅东栏一株雪，人生看得几清明 avatar: enabled: true local: true src: img/avatar.png ps: 这里的头像放在/assets/img下，需要自己手动创建该目录。\n侧边栏页面 侧边栏的配置如下：\nmenu: main: - identifier: home name: 主页 url: / weight: -100 params: icon: home social: - identifier: github name: GitHub url: https://github.com/yourname params: icon: github - identifier: weibo name: Weibo url: https://weibo.com params: icon: weibo 在social下面可以增加一些自己社交媒体（如github、微博）的链接，更方便被开盒。可以在各种开源图标库上找一些自己喜欢的图标，放在/assets/icons下面。\n在main下面增加对象并配置URL，可以在侧边栏增加按钮。\n此外，stack主题默认提供了关于、归档、搜索、友链这四个入口。\n参照主题的exampleSite，content文件夹的目录如下：\ncontent tree . ├── page │ ├── about │ │ ├── index.md │ │ └── index.zh-cn.md │ ├── archives │ │ └── index.md │ ├── links │ │ ├── index.md │ │ └── ts-logo-128.jpg │ └── search │ └── index.md └── post ├── first.md └── second.md 其中关于和友链这两个页面的内容可以自定义，编辑各自目录下的md文件，就可以把自己和一些buddy的姓名和学校介绍一下。\n页面效果 进一步配置页面效果，就需要编辑一下相关的css代码了。这些代码一般在/assets/scss目录下面。\n例如，要想调整一下文章目录之间卡片的间距，首先通过开发者工具查看一下对应元素的class：\n之后可以在各种代码编辑器中善用查找功能找到对应的样式，然后修改。\n","date":"2023-04-17T13:28:25+08:00","permalink":"https://example.com/p/hugo-stack%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AE/","title":"hugo stack主题的配置"},{"content":"安装nvm nvm 是管理node版本的工具，可以通过命令行方便地切换使用的node版本。\n例：\n$ nvm use 16 Now using node v16.9.1 (npm v7.21.1) $ node -v v16.9.1 $ nvm use 14 Now using node v14.18.0 (npm v6.14.15) $ node -v v14.18.0 $ nvm install 12 Now using node v12.22.6 (npm v6.14.5) $ node -v v12.22.6 使用homebrew 运行命令：\nbrew install nvm 配置nvm：如果不存在，运行以下命令创建nvm的工作目录：\nmkdir ~/.nvm 在zsh配置文件加入以下的内容：\nvim ~/.zshrc export NVM_DIR=\u0026#34;$HOME/.nvm\u0026#34; [ -s \u0026#34;/opt/homebrew/opt/nvm/nvm.sh\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;/opt/homebrew/opt/nvm/nvm.sh\u0026#34; # This loads nvm [ -s \u0026#34;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm\u0026#34; # This loads nvm bash_completion source ~/.zshrc 使用install script 如果你不嫌烦的话，还可以\n运行以下命令：\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash 验证 nvm -v 0.39.1 安装node 安装完成nvm后，运行以下命令：\nnvm install v15 Now using node v15.14.0 (npm v7.7.6) Creating default alias: default -\u0026gt; v15 (-\u0026gt; v15.14.0) 查看所有版本、目前使用的版本：\n➜ ~ nvm ls -\u0026gt; v15.14.0 system default -\u0026gt; v15 (-\u0026gt; v15.14.0) iojs -\u0026gt; N/A (default) unstable -\u0026gt; N/A (default) node -\u0026gt; stable (-\u0026gt; v15.14.0) (default) stable -\u0026gt; 15.14 (-\u0026gt; v15.14.0) (default) lts/* -\u0026gt; lts/hydrogen (-\u0026gt; N/A) lts/argon -\u0026gt; v4.9.1 (-\u0026gt; N/A) lts/boron -\u0026gt; v6.17.1 (-\u0026gt; N/A) lts/carbon -\u0026gt; v8.17.0 (-\u0026gt; N/A) lts/dubnium -\u0026gt; v10.24.1 (-\u0026gt; N/A) lts/erbium -\u0026gt; v12.22.12 (-\u0026gt; N/A) lts/fermium -\u0026gt; v14.21.3 (-\u0026gt; N/A) lts/gallium -\u0026gt; v16.20.0 (-\u0026gt; N/A) lts/hydrogen -\u0026gt; v18.16.0 (-\u0026gt; N/A) ➜ ~ nvm current v15.14.0 ","date":"2023-04-17T13:28:25+08:00","permalink":"https://example.com/p/%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","title":"前端环境搭建"},{"content":"这是代码样式测试 Java\npublic static void main(String[] args){ // 这是一段代码 System.out.println(\u0026#34;米冲高\u0026#34;); } golang\nfunc main(){ Println(\u0026#34;关键年\u0026#34;); } 这是表格样式测试 1 2 3 111 AAA 666 111 111 111 111 111 111 这是列表样式测试 有序列表：\n权力的游戏 列王的纷争 无序列表：\n杭州 南京 武汉 待办列表：\n战争与和平 魔山 细雪 这是公式样式测试 $$ \\begin{align*} y = y(x,t) \u0026amp;= A e^{i\\theta} \\ \u0026amp;= A (\\cos \\theta + i \\sin \\theta) \\ \u0026amp;= A (\\cos(kx - \\omega t) + i \\sin(kx - \\omega t)) \\ \u0026amp;= A\\cos(kx - \\omega t) + i A\\sin(kx - \\omega t) \\ \u0026amp;= A\\cos \\Big(\\frac{2\\pi}{\\lambda}x - \\frac{2\\pi v}{\\lambda} t \\Big) + i A\\sin \\Big(\\frac{2\\pi}{\\lambda}x - \\frac{2\\pi v}{\\lambda} t \\Big) \\ \u0026amp;= A\\cos \\frac{2\\pi}{\\lambda} (x - v t) + i A\\sin \\frac{2\\pi}{\\lambda} (x - v t) \\end{align*} $$\n看来这个主题不支持公式\n哦我也用不上啊 那没事了\n这是链接测试 unsplash\n这是图片测试 ","date":"2023-04-12T20:05:51+08:00","permalink":"https://example.com/p/%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95/","title":"样式测试"},{"content":"Part1 忘了什么时候开始觉得讽刺 当我不再喜欢别人夸我懂事 什么场合说些什么话更合适 熟练的是 点到为止\n以为飞得很稳后又坠落几次 等到事故足够多到熬成故事 欲言又止化作目光温柔克制 更多的是 一笑了之\n","date":"2023-04-12T19:04:47+08:00","permalink":"https://example.com/p/%E6%88%90%E4%B8%BA%E4%BA%86%E8%BF%99%E6%A0%B7%E7%9A%84%E6%88%90%E5%B9%B4%E4%BA%BA%E4%BD%86%E6%98%AF/","title":"成为了这样的成年人，但是"},{"content":"Stream中的操作可以分为两大类：中间操作（Intermediate operations）与结束操作（Terminal operations）。\n中间操作只是对操作进行了记录，只有结束操作才会触发实际的计算（即惰性求值），这也是Stream在迭代大集合时高效的原因之一。\n中间操作又可以分为无状态（Stateless）操作与有状态（Stateful）操作，前者是指元素的处理不受之前元素的影响；后者是指该操作只有拿到所有元素之后才能继续下去。\n结束操作又可以分为短路（short-circuiting）与非短路操作，前者是指遇到某些符合条件的元素就可以得到最终结果；而后者是指必须处理所有元素才能得到最终结果。\n中间操作 无状态 unorderer() filter() map()mapToInt() mapToDouble()flatMap() flatMapToLong()flatMapToDouble() peek() 有状态 distinct() sorted()limit() skip() 结束操作 非短路操作 forEach()forEachOrdered() toArray() reduce() collect()max() min() count() 短路操作 anyMatch() allMathch() noneMatch() findFirst() findAny() ","date":"2023-04-07T17:30:38+08:00","permalink":"https://example.com/p/stream/","title":"Stream"},{"content":"梨花淡白柳深青，柳絮飞时花满城。\n惆怅东栏一株雪，人生看得几清明。\npart1 脱下长日的假面\n奔向梦幻的疆界\n南瓜马车的午夜\n换上童话的玻璃鞋\npart2 老胡也是经过了深思熟虑,在每个日日夜夜思考这个问题。就老胡个人来说,鸟笼效应对老胡的意义, 不能不说非常重大。很多人不想看鸟笼效应的报导，我也不忍看它，因为想象一下就感觉很难受。近来由于鸟笼效应事件的发生，很多人都受委屈了。 鸟笼效应 ，给那些群众造成的不便可想而知。\n可是，即使是这样，鸟笼效应的出现仍然代表了一定的意义。对老胡而言，鸟笼效应不仅仅是一个重大的事件，更是值得思考的一件事，老胡看，鸟笼效应的情况引起舆论强烈不满。除了舆论本身存在一些因鸟笼效应引起的怨气，也有其他的原因，老胡觉得鸟笼效应实在不应该。以世界的眼光综观鸟笼效应的过程，不能不说，各种体制的社会看上去对阻止鸟笼效应有着各自的软肋。在开始阶段都不够坚决，眼看着风险出现了，但都有放不下的坛坛罐罐，心存各自的侥幸，直到那头灰犀牛以意外的速度闯到眼前。对于 鸟笼效应 ，老胡有个基本判断，公众之所以对鸟笼效应很敏感，我认为主要是对以往情况不太满意，对鸟笼效应问题缺少信心，所以对事件的一些细节全都朝着最不利的方向去解读了。这不禁令老胡深思，除了有鸟笼效应这个事实，我认为面对接下来的巨大风险，我们还要形成了这样一个信念，我看到有报道说鸟笼效应可以这样解决，我认为这种办法值得研究参考。只要大家都诚心，问题总是能够得到解决。老胡今天略作梳理鸟笼效应发生的过程和原因，是为了提醒当前案例所暴露的一些缺陷和问题。老胡从来不反对舆论场上有多元的观点发生各种碰撞，但老胡认为鸟笼效应的这次事件堪称是一番露怯的表演。\n鸟笼效应注定会给中国人留下深刻的印象，一些人担心中国不会进行深刻的反思，我不这样看。我相信，问题相当明显，从鸟笼效应以来，中国的反思就已经开始了。有些话并没有公开说透，但我们可以找到很多这些反思在进行中的明确证据。这，就是复杂中国的体现。\npart3 冰雨的风暴 凯特琳起身脱掉长袍，走上台阶，没入黑暗之中，暂时远离父亲。无边的恐怖充斥在她心底。“父亲，”她说，“父亲，我明白了。”她已不再是那个满脑子白日梦的纯洁新娘，她成了寡妇、成了叛徒、成了悲伤的母亲，但也更加懂事，对世态炎凉瞧得一清二楚。“\n或许这份请柬是礼貌的表示，一点单纯的心意；或许这只是一顿普通的晚宴。可这里是红堡，这里是君临城，这里是国王乔佛里·拜拉席恩一世的宫廷，如果说珊莎在这里还学会了什么的话，那就是谁也不能信任。\n当然可以，”她的笑很温馨，唯独牙齿有些歪斜，“而我们也有猎杀你的自由。自由是危险的，但人人都渴求它。”她把罩着袖子的手掌放在他膝盖上。“你什么都不懂。”\n戴佛斯不知儿子们会不会也变成鬼魂回来。在海上讨生活见过太多诡异的事情，鬼魂又有什么值得奇怪呢？\n琼恩无言以对。难怪七大王国的人认为自由民简直不是人。他们没有法律，没有荣誉，甚至连基本的道德准则也没有。他们相互间无休止地偷窃，像野兽一样繁殖，崇拜强暴无视婚姻，到处产下私生子。可不管怎么说，他发现自己渐渐喜欢上了巨人克星托蒙德——尽管他是个名副其实的吹牛大王——还有长矛里克，耶哥蕊特……不，不要去想耶哥蕊特。\n长城之外难辨是非。琼恩不知自己还能不能区分荣誉与耻辱、正确和错误。\n","date":"2023-04-04T00:31:34+08:00","permalink":"https://example.com/p/first/","title":"First"}]